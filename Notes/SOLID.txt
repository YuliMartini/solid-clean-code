Principios SOLID:
- Los principios de SOLID nos indican cómo organizar nuestras funciones y estructuras de datos en componentes y cómo dichos componentes deben estar interconectados.
- Single Responsibility
- Open and Close
- Liskov Substitution
- Interface Segregation
- Dependency Inversion


Single Responsibility / Responsabilidad Unica:
- Nunca debería haber más de un motivo por el cual cambiar una clase o un módulo - Robert C. Martin
- Una clase debe de tener una única responsabilidad. Tener más de una responsabilidad en nuestras clases o módulos hace que nuestro código sea difícil de leer, testear, y mantener.
  Es decir, hace que el código sea menos flexible, más rígido, y menos tolerante al cambio.
- Tener una única responsabilidad no es sinónimo de hacer una única cosa. Queremos que nuestras clases y módulos se enfoquen en realizar una serie de procesos que estén estrechamente 
  relacionados entre sí.
- El principio de responsabilidad única no se basa en crear clases con un sólo método, sino en diseñar componentes que sólo estén expuestos a una fuente de cambio.


Open and Close / Abierto y Cerrado:
- Es un principio que depende del contexto.
- Establece que las entidades de software (clases, módulos, métodos, etc) deber estar abiertas para la extensión, pero cerradas para la modificación.


Liskov Substitution / Sustitución de Liskov
- "Las funciones que utilicen punteros o referencias a clases base deben ser capaces de usar objetos de clases derivadas sin saberlo" - Robert C. Martin
- "Siendo U un subtipo de T, cualquier instancia de T debería poder ser sustituida por cualquier instancia de U sin alterar las propiedades del sistema"


Interface Segregation / Segregación de Interfaz
- "Los clientes no deberían estar obligados a depender de interfaces que no utilicen" - Robert C. Martin
- Este principio establece que los clientes no deberían verse forzados a depender de interfaces que no usan.


Dependency Inversion / Inversión de Dependencias
- "Los módulos de alto nivel no deben depender de módulos de bajo nivel. Ambos deben depender de abstracciones. Las abstracciones no deben depender de concreciones.
   Los detalles deben depender de abstracciones." - Robert C. Martin
- Los módulos de alto nivel no deberían depender de módulos de bajo nivel: Los componentes más importantes son aquellos centrados en resolver el problema 
  subyacente al negocio, es decir, la capa de dominio.
  Los menos importantes son los que están próximos a la infraestructura, es decir, aquellos relacionados con la UI, la persistencia, la comunicación con API externas, etc. (ej: arquitectura exagonal)
- Depender de abstracciones: nos estamos refiriendo a clases abstractas o interfaces.
  Uno de los motivos más importantes por el cual las reglas de negocio o capa de dominio deben depender de estas y no de concreciones es que aumenta su tolerancia al cambio.
  ¿Por qué obtenemos este beneficio? Cada cambio en un componente abstracto implica un cambio en su implementación. Por el contrario, los cambios en implementaciones concretas, la mayoría de las veces, no requieren 
  cambios en las interfaces que implementa.
- Inyección de Dependencias: dependencia en programación significa que un módulo o componente requiere de otro para poder realizar su trabajo.
  En algún momento nuestro programa o aplicación llegará a estar formado por muchos módulos. Cuando esto pase, es cuando debemos usar inyección de dependencias.
