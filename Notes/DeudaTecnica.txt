Deuda Técnica: la falta de calidad en el código, que genera una deuda que pepercutirá en costos futuros
Usualmente son costos económicos: 
    - Tiempo en realizar mantenimientos
    - Tiempo en refactorizar código
    - Tiempo en comprender el código
    - Tiempo adicional en la transferencia del código (transferencia de conocimiento hacia otras personas)

Esquema de la deuda técnica de Martin Fowler:
    1- Imprudente y Deliberada: El desarrollador actúa de forma consciente e imprudente.
    Esto suele llevar a un proyecto que tiene mala calidad y es poco tolerante al cambio.
    "No hay tiempo, sólo copia y pega eso de nuevo."

    2- Imprudente e Inadvertida: Es probablemente la deuda más peligrosa, ya que se genera por el desconocimiento o falta de experiencia.
    Usualmente este tipo de deuda es generada por un desarrollador de perfil Junior o lo que es peor, un falso Senior.
    "Qué son patrones de diseño?"

    3- Prudente y Deliberada: Es la deuda en la cual sabemos que tenemos esa deuda y estamos conscientes de ella. Propiamente sabemos que esa deuda existe.
    El peligro con esta deuda radica en que si no se paga a tiempo, más intereses nosotros vamos a pagar después. Este tipo de deuda es bastante común.
    "Tenemos que entregar rápido, ya refactorizaremos"

    4- Prudente e Inadvertida: Es común que en la mayoría de los proyectos, no tenemos el conocimiento total o a ciencia cierta cómo va a terminar luciendo nuestro proyecto.
    Este es el tipo de deuda que nosotros vamos a darnos cuenta hasta que ya avanzamos a maduramos en el proyecto, es decir, no la estructura o análisis del mismo, sino a 
    cuando ya empezamos a codificar ese ejercicio, esa aplicación. Ahí es que decimos quizás esta no fue la mejor arquitectura, no fue la mejor forma de hacerlo.
    Y aquí es donde llega el punto donde cae la deuda. En ese punto vamos a considerar si vale la pena volverlo a hacer, implementando la arquitectura o patrón que va a 
    ayudarnos a resolver el problema o seguir adelante.
    "Ahora sabemos cómo lo deberíamos haber hecho"

Usualmente caer en la deuda técnica es normal, y a menudo inevitable.


¿Cómo se paga una deuda técnica?
    1- Refactorización: es simplemente un proceso que tiene como objetivo mejorar el código sin alterar su comportamiento para que sea más entendible y tolerante a cambios.
    Usualmente para que una refactorización fuerte tenga el objetivo esperado, es imprescindible contar con pruebas automáticas.

    La mala calidad en el software siempre la acaba pagando o asumiendo alguien. Ya sea el cliente, el proveedor con recursos o el propio desarrollador dedicando tiempo a 
    refactorizar o malgastando tiempo programando sobre un sistema frágil.

Clean Code:
    - "Código Limpio es aquel que se ha escrito con la intención de que otra persona (o tú mismo en el futuro) lo entienda" - Carlos Blé
    - "Nuestro código tiene que ser simple y directo, debería leerse con la misma facilidad que un texto bien escrito" - Grady Booch
    - "Programar es el arte de decirle a otro humano lo que quieres que la computadora haga" - Donald Knuth
